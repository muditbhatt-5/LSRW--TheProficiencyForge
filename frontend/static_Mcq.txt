import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Download } from 'lucide-react';
import { jsPDF } from 'jspdf';

const questions = [
  {
    id: 1,
    question: "What is the capital of France?",
    options: ["London", "Berlin", "Paris", "Madrid"],
    correctAnswer: "Paris"
  },
  {
    id: 2,
    question: "Which language is most widely spoken in the world?",
    options: ["English", "Mandarin", "Spanish", "Hindi"],
    correctAnswer: "Mandarin"
  },
  {
    id: 3,
    question: "What is the largest planet in our solar system?",
    options: ["Mars", "Venus", "Jupiter", "Saturn"],
    correctAnswer: "Jupiter"
  }
];

const Exam = () => {
  const navigate = useNavigate();
  const [timer, setTimer] = useState(30);
  const [examStarted, setExamStarted] = useState(false);
  const [answers, setAnswers] = useState({});
  const [examCompleted, setExamCompleted] = useState(false);
  const [score, setScore] = useState(0);

  useEffect(() => {
    if (timer > 0 && !examStarted) {
      const countdown = setInterval(() => {
        setTimer((prev) => prev - 1);
      }, 1000);
      return () => clearInterval(countdown);
    } else if (timer === 0 && !examStarted) {
      setExamStarted(true);
    }
  }, [timer, examStarted]);

  const handleAnswerSelect = (questionId, answer) => {
    setAnswers((prev) => ({ ...prev, [questionId]: answer }));
  };

  const calculateScore = () => {
    let correctAnswers = 0;
    questions.forEach((question) => {
      if (answers[question.id] === question.correctAnswer) {
        correctAnswers++;
      }
    });
    return (correctAnswers / questions.length) * 100;
  };

  const handleSubmit = () => {
    const finalScore = calculateScore();
    setScore(finalScore);
    setExamCompleted(true);
  };

  const downloadResult = () => {
    const doc = new jsPDF();
    doc.setFontSize(20);
    doc.text('Exam Results', 20, 20);
    doc.setFontSize(14);
    doc.text(`Score: ${score}%`, 20, 40);
    doc.text('Questions and Answers:', 20, 60);
    
    let yPosition = 80;
    questions.forEach((question, index) => {
      doc.setFontSize(12);
      doc.text(`${index + 1}. ${question.question}`, 20, yPosition);
      yPosition += 10;
      doc.text(`Your Answer: ${answers[question.id] || 'Not answered'}`, 30, yPosition);
      yPosition += 10;
      doc.text(`Correct Answer: ${question.correctAnswer}`, 30, yPosition);
      yPosition += 20;
    });

    doc.save('exam-results.pdf');
  };

  if (!examStarted) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="w-full max-w-4xl h-[600px] flex rounded-lg overflow-hidden shadow-2xl">
          <div className="w-1/2 bg-[#159FFC] opacity-20"></div>
          <div className="w-1/2 flex items-center justify-center bg-white">
            <div className="text-center">
              <h1 className="text-3xl font-bold mb-4">Get Ready for Exam</h1>
              <p className="text-xl mb-6">All the best!</p>
              <div className="text-6xl font-bold text-[#159FFC]">{timer}</div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white flex items-center justify-center">
      <div className="w-full max-w-4xl h-[700px] flex rounded-lg overflow-hidden shadow-2xl">
        <div className="w-1/2 bg-[#159FFC] opacity-20"></div>
        <div className="w-1/2 bg-white p-8 overflow-y-auto">
          <button
            onClick={() => navigate('/dashboard')}
            className="flex items-center text-[#159FFC] mb-6"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            Back to Dashboard
          </button>

          {examCompleted ? (
            <div className="bg-white p-6 rounded-lg shadow-lg">
              <h2 className="text-2xl font-bold mb-4">Exam Completed!</h2>
              <p className="text-lg mb-4">Your Score: {score}%</p>
              <button
                onClick={downloadResult}
                className="flex items-center px-4 py-2 bg-[#159FFC] text-white rounded-md hover:bg-[#0b8ee6] text-sm"
              >
                <Download className="w-4 h-4 mr-2" />
                Download Results
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              {questions.map((question) => (
                <div key={question.id} className="bg-white p-4 rounded-lg shadow-lg">
                  <p className="text-sm font-medium mb-3">{question.question}</p>
                  <div className="space-y-2">
                    {question.options.map((option) => (
                      <label
                        key={option}
                        className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 text-sm"
                      >
                        <input
                          type="radio"
                          name={`question-${question.id}`}
                          value={option}
                          checked={answers[question.id] === option}
                          onChange={() => handleAnswerSelect(question.id, option)}
                          className="form-radio text-[#159FFC]"
                        />
                        <span>{option}</span>
                      </label>
                    ))}
                  </div>
                </div>
              ))}
              <button
                onClick={handleSubmit}
                className="w-full py-2 bg-[#159FFC] text-white rounded-md hover:bg-[#0b8ee6] text-sm"
              >
                Submit Exam
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Exam;